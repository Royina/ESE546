# -*- coding: utf-8 -*-
"""hw2_problem3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KUtV6dtjs7mhl5YBnwDYHM4Qd_ZqRhUj
"""

# torch and torchvision imports
import torch
import torchvision
import torch.nn as nn
import torchvision.transforms as transforms
import torch.optim as optim
import matplotlib.pyplot as plt

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

device

"""### (a) Plot the training and validation losses and errors as a function of the number of epochs


 The model currently does not achieve less than 12% validation error, you have to tweak the parameters to get it.
"""

# Reading in the dataset
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=16,
                                          shuffle=True)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=16,
                                         shuffle=False)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')


# Defining the model
class View(nn.Module):
    def __init__(self,o):
        super().__init__()
        self.o = o

    def forward(self,x):
        return x.view(-1, self.o)

class allcnn_t(nn.Module):
    def __init__(self, c1=96, c2= 192):
        super().__init__()
        d = 0.5

        def convbn(ci,co,ksz,s=1,pz=0):
            return nn.Sequential(
                nn.Conv2d(ci,co,ksz,stride=s,padding=pz),
                nn.ReLU(True),
                nn.BatchNorm2d(co))

        self.m = nn.Sequential(
            nn.Dropout(0.2),
            convbn(3,c1,3,1,1),
            convbn(c1,c1,3,1,1),
            convbn(c1,c1,3,2,1),
            nn.Dropout(d),
            convbn(c1,c2,3,1,1),
            convbn(c2,c2,3,1,1),
            convbn(c2,c2,3,2,1),
            nn.Dropout(d),
            convbn(c2,c2,3,1,1),
            convbn(c2,c2,3,1,1),
            convbn(c2,10,1,1),
            nn.AvgPool2d(8),
            View(10))

        print('Num parameters: ', sum([p.numel() for p in self.m.parameters()]))

    def forward(self, x):
        return self.m(x)

# The training loop

def train(net, optimizer, criterion, train_loader, test_loader, epochs, model_name, plot):
    model = net.to(device)
    total_step = len(train_loader)
    overall_step = 0
    train_loss_values = []
    train_error = []
    val_loss_values = []
    val_error = []
    for epoch in range(epochs):
        correct = 0
        total = 0
        flag = 0
        running_loss = 0.0
        if epoch == 25 and flag == 0:
          for op_params in optimizer.param_groups:
            op_params['lr'] = 0.001
          flag = 1
        for i, (images, labels) in enumerate(train_loader):
            # Move tensors to configured device
            images = images.to(device)
            labels = labels.to(device)
            #Forward Pass
            outputs = model(images)
            loss = criterion(outputs, labels)
            optimizer.zero_grad()
            loss.backward()
            running_loss += loss.item()
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
            optimizer.step()
            if (i+1) % 1000 == 0:
              print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'.format(epoch+1, epochs, i+1, total_step, loss.item()))
            if plot:
              info = { ('loss_' + model_name): loss.item() }

              # for tag, value in info.items():
              #   logger.scalar_summary(tag, value, overall_step+1)
        train_loss_values.append(running_loss)
        train_error.append(100-100*correct/total)

        model.eval()
        with torch.no_grad():
            correct = 0
            total = 0
            for i, (images, labels) in enumerate(test_loader):
                images = images.to(device)
                labels = labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs.data, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        print('Accuracy of the network on the test images: {} %'.format(100 * correct / total))
        val_error.append(100-100*correct/total)
        val_loss_values.append(running_loss)
    return val_error,val_loss_values,train_error,train_loss_values

model = allcnn_t().to(device)
epochs = 50
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9, weight_decay=0.00001, nesterov=True)
val_error,val_loss_values,train_error,train_loss_values= train(model, optimizer, criterion, trainloader, testloader, epochs, 'cnn_curve', True)

torch.save(model, './Intital_hw2_p3_model/model1.pt')

"""### Increasing the number of epochs"""

# The training loop

def train(net, optimizer, criterion, train_loader, test_loader, epochs, model_name, plot):
    model = net.to(device)
    total_step = len(train_loader)
    overall_step = 0
    train_loss_values = []
    train_error = []
    val_loss_values = []
    val_error = []
    for epoch in range(epochs):
        correct = 0
        total = 0
        flag = 0
        running_loss = 0.0
        if epoch == 40 and flag == 0:
          for op_params in optimizer.param_groups:
            op_params['lr'] = 0.001
          flag = 1
        for i, (images, labels) in enumerate(train_loader):
            # Move tensors to configured device
            images = images.to(device)
            labels = labels.to(device)
            #Forward Pass
            outputs = model(images)
            loss = criterion(outputs, labels)
            optimizer.zero_grad()
            loss.backward()
            running_loss += loss.item()
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
            optimizer.step()
            if (i+1) % 1000 == 0:
              print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'.format(epoch+1, epochs, i+1, total_step, loss.item()))
            if plot:
              info = { ('loss_' + model_name): loss.item() }

              # for tag, value in info.items():
              #   logger.scalar_summary(tag, value, overall_step+1)
        train_loss_values.append(running_loss)
        train_error.append(100-100*correct/total)

        model.eval()
        with torch.no_grad():
            correct = 0
            total = 0
            for i, (images, labels) in enumerate(test_loader):
                images = images.to(device)
                labels = labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs.data, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        print('Accuracy of the network on the test images: {} %'.format(100 * correct / total))
        val_error.append(100-100*correct/total)
        val_loss_values.append(running_loss)
    return val_error,val_loss_values,train_error,train_loss_values

model = allcnn_t().to(device)
epochs = 100
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9, weight_decay=0.00001, nesterov=True)
val_error,val_loss_values,train_error,train_loss_values= train(model, optimizer, criterion, trainloader, testloader, epochs, 'cnn_curve', True)

torch.save(model, './Intital_hw2_p3_model/model1_100epoch_40lr.pt')

plt.plot(train_error)

"""### Part 3.a.

### Changing the learning rate and weight decay in train code
"""

# The training loop - changing the learning rate and weight decay as per suggestion given in the document

def train(net, optimizer, criterion, train_loader, test_loader, epochs, model_name, plot):
    model = net.to(device)
    total_step = len(train_loader)
    overall_step = 0
    train_loss_values = []
    train_error = []
    val_loss_values = []
    val_error = []
    schedule_lr = 0.1
    for epoch in range(epochs):
        correct = 0
        total = 0
        # flag = 0
        running_loss = 0.0
        # if epoch == 25 and flag == 0:
        #   for op_params in optimizer.param_groups:
        #     op_params['lr'] = 0.001
        #   flag = 1
        if epoch % 40 == 0 and epoch!=0:
           schedule_lr = schedule_lr * 0.1
           for op_params in optimizer.param_groups:
                op_params['lr'] = schedule_lr
        # print(schedule_lr)
        for i, (images, labels) in enumerate(train_loader):
            # Move tensors to configured device
            images = images.to(device)
            labels = labels.to(device)
            #Forward Pass
            outputs = model(images)
            loss = criterion(outputs, labels)
            optimizer.zero_grad()
            loss.backward()
            running_loss += loss.item()
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
            optimizer.step()
            if (i+1) % 1000 == 0:
              print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'.format(epoch+1, epochs, i+1, total_step, loss.item()))
            if plot:
              info = { ('loss_' + model_name): loss.item() }

              # for tag, value in info.items():
              #   logger.scalar_summary(tag, value, overall_step+1)
        train_loss_values.append(running_loss)
        train_error.append(100-100*correct/total)

        running_loss = 0.0

        model.eval()
        with torch.no_grad():
            correct = 0
            total = 0
            for i, (images, labels) in enumerate(test_loader):
                images = images.to(device)
                labels = labels.to(device)
                outputs = model(images)
                loss = criterion(outputs, labels)
                running_loss += loss.item()
                _, predicted = torch.max(outputs.data, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        print('Accuracy of the network on the test images: {} %'.format(100 * correct / total))
        val_error.append(100-100*correct/total)
        val_loss_values.append(running_loss)
    return val_error,val_loss_values,train_error,train_loss_values

model = allcnn_t().to(device)
epochs = 100
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.1, momentum=0.9, weight_decay=0.0001, nesterov=True)
val_error,val_loss_values,train_error,train_loss_values= train(model, optimizer, criterion, trainloader, testloader, epochs, 'cnn_curve', True)

#torch.save(model, './Intital_hw2_p3_model/model3_100epoch_40lr_1e4wt.pt')
torch.save(model, 'model4_100epoch_40lr_1e4wt.pt')

## saving these for plotting val_error,val_loss_values,train_error,train_loss_values
import numpy as np
np.save('val_error4.npy', np.array(val_error))
np.save('val_loss_values4.npy', np.array(val_loss_values))
np.save('train_error4.npy', np.array(train_error))
np.save('train_loss_values4.npy', np.array(train_loss_values))

np.array(train_error).min(), np.array(train_error).max()

np.array(val_error).min(), np.array(val_error).max()

plt.plot(train_error)

plt.plot(train_loss_values)

plt.plot(val_error)

plt.plot(val_loss_values)



final_model = torch.load('model4_100epoch_40lr_1e4wt.pt') ## checking if the model got stored
for parameter in final_model.parameters():
    print(parameter)

np.array(np.load('val_error4.npy')).min(), np.array(np.load('val_error4.npy')).max() ## checking if losses and error got stored

"""### Part 3.b."""

valloader_perturb = torch.utils.data.DataLoader(testset, batch_size=100,
                                          shuffle=True)

images, labels = next(iter(valloader_perturb))
print(len(labels))

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(final_model.parameters(), lr=0.1, momentum=0.9, weight_decay=0.0001, nesterov=True)

# Move tensors to configured device
images = images.to(device)
labels = labels.to(device)
#Forward Pass
images.requires_grad_()
outputs = final_model(images)
loss = criterion(outputs, labels)
optimizer.zero_grad()
loss.backward()
dx = images.grad.data.clone()

_, predicted = torch.max(outputs.data, 1)

pred_np = predicted.cpu().numpy()
labels_np = labels.cpu().numpy()
correct_list =  np.argwhere(pred_np==labels_np)
incorrect_list = np.argwhere(pred_np!=labels_np)
len(correct_list), len(incorrect_list)

grad_images = dx.cpu().detach().numpy()
grad_images.shape

grad_images[0]

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

np.squeeze(scaler.fit_transform(grad_images_transformed[0].T.flatten().reshape((-1,1)))).reshape((32,32,3)).max()

grad_images_transformed[0].max()

import matplotlib.pyplot as plt
import numpy as np

# Create some data for plotting
x = np.linspace(0, 2 * np.pi, 100)
y = np.sin(x)

# Create a 5x4 grid of subplots
fig, axes = plt.subplots(5, 4, figsize=(12, 10))

# Loop to populate each subplot with data
for i in range(5):
    for j in range(2):
        ax = axes[i, j]
        print(np.squeeze(grad_images_transformed[incorrect_list[(i*2)+j]]).T.shape)
        ax.imshow((np.squeeze(scaler.fit_transform(grad_images[incorrect_list[(i*2)+j]].T.flatten().reshape((-1,1)))).reshape((32,32,3))*255).astype(int))
        ax.set_title(f'Incorrect label of : {labels_np[incorrect_list[(i*2)+j]]}')
        ax.grid(True)

# Loop to populate each subplot with data
for i in range(5):
    for j in range(2, 4):
        ax = axes[i, j]
        ax.imshow((np.squeeze(scaler.fit_transform(grad_images[correct_list[(i*2)+j]].T.flatten().reshape((-1,1)))).reshape((32,32,3))*255).astype(int))
        ax.set_title(f'correct label of : {labels_np[correct_list[(i*2)+j]]}')
        ax.grid(True)


# Adjust layout for better spacing
plt.tight_layout()

# Show the plots
plt.show()

## 5 step perturbation
eps = 8
loss_list_perturb = []
images, labels = next(iter(valloader_perturb))
print(len(labels))
# Move tensors to configured device
images = images.to(device)
labels = labels.to(device)


for i in range(5):
  #Forward Pass
  images.requires_grad_()
  outputs = final_model(images)
  loss = criterion(outputs, labels)
  optimizer.zero_grad()
  loss.backward()
  dx = images.grad.data.clone()
  loss_list_perturb.append(loss.item())
  with torch.no_grad():
    images += eps*torch.sign(dx)

np.array(loss_list_perturb)

plt.plot(np.array(loss_list_perturb))

"""## Part 3.c."""

## original validation images

correct = 0
total = 0
final_model.eval()
for i, (images, labels) in enumerate(testloader):
    images = images.to(device)
    labels = labels.to(device)
    outputs = final_model(images)
    loss = criterion(outputs, labels)

    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()

print('Accuracy of the network on the test images: {} %'.format(100 * correct / total))

## 1 step perturbation to validation images

correct = 0
total = 0
for i, (images, labels) in enumerate(testloader):
    images = images.to(device)
    labels = labels.to(device)
    images.requires_grad_()
    outputs = final_model(images)
    loss = criterion(outputs, labels)
    optimizer.zero_grad()
    loss.backward()
    dx = images.grad.data.clone()

    ## 1 step perturbation
    with torch.no_grad():
      images += eps*torch.sign(dx)

    outputs = final_model(images)
    loss = criterion(outputs, labels)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()

print('Accuracy of the network on the test images: {} %'.format(100 * correct / total))